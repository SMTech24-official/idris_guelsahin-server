generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  email          String  @unique
  mobileNumber       String?
  currentAddress String?
  homeAddress    String?

  role         UserRole
  password     String
  profileImage String?
  coverImage   String?

  userStatus UserStatus @default(ACTIVE)
  isDeleted  Boolean    @default(false)

  isOnline Boolean   @default(false)
  lastSeen DateTime?

  otp           Int?
  otpExpiry     DateTime?
  emailVerified Boolean   @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  notification Notification[]
  chatUser1     ChatRoom[]      @relation(name: "ChatUser1")
  chatUser2     ChatRoom[]      @relation(name: "ChatUser2")
  message      Message[]
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String
  color String? @default("#ffffff")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  userId     String           @db.ObjectId
  entityId   String
  title      String
  content    String
  entityType NotificationType
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

model ChatRoom {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String   @db.ObjectId
  user2Id   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1    User?     @relation("ChatUser1", fields: [user1Id], references: [id])
  user2    User?     @relation("ChatUser2", fields: [user2Id], references: [id])
  messages Message[]
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatroomId String   @db.ObjectId
  senderId   String   @db.ObjectId
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User     @relation(fields: [senderId], references: [id])
  chatroom ChatRoom @relation(fields: [chatroomId], references: [id])
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  USER
  SELLER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum NotificationType {
  ORDER
  PAYMENT
  BOOKING
}

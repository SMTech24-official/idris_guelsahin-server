generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName       String
  email          String  @unique
  mobileNumber   String?
  currentAddress String?
  homeAddress    String?

  role         UserRole
  password     String
  profileImage String?
  coverImage   String?

  stripeCustomerId String?
  userStatus       UserStatus @default(ACTIVE)
  isDeleted        Boolean    @default(false)

  isOnline Boolean   @default(false)
  lastSeen DateTime?

  otp                Int?
  otpExpiry          DateTime?
  emailVerified      Boolean            @default(false)
  verificationStatus VerificationStatus @default(PENDING)

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  notification   Notification[]
  chatUser1      ChatRoom[]      @relation(name: "ChatUser1")
  chatUser2      ChatRoom[]      @relation(name: "ChatUser2")
  message        Message[]
  identification Identification?
  Subscription   Subscription[]
  Product        Product[]
  Favorite       Favorite[]
}

model Identification {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId

  nid          String
  tradeLicense String
  passport     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String   @unique
  slug        String   @unique
  description String?
  details     String[]
  image       String?
  isActive    Boolean  @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  categoryId    String        @db.ObjectId
  name          String
  slug          String        @unique
  location      String
  details       Json
  description   String
  websiteUrl    String
  facebookUrl   String
  instragramUrl String
  images        String[]
  status        ProductStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Favorite Favorite[]
}

model Favorite {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  productId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId], name: "uniqueFavorite")
}

model Plan {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  price           Float // cents
  currency        String         @default("usd")
  duration        PlanDuration
  colorTheme      String
  description     String
  features        String[]       @default([])
  stripePriceId   String?
  stripeProductId String?
  createdAt       DateTime       @default(now())
  Subscription    Subscription[]
}

model Subscription {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  planId               String    @db.ObjectId
  stripeSubscriptionId String?
  status               String
  currentPeriodEnd     DateTime?
  createdAt            DateTime  @default(now())

  user User  @relation(fields: [userId], references: [id])
  plan Plan? @relation(fields: [planId], references: [id])

}

model Notification {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  userId     String           @db.ObjectId
  entityId   String
  title      String
  content    String
  entityType NotificationType
  isRead     Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

model ChatRoom {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String   @db.ObjectId
  user2Id   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1    User?     @relation("ChatUser1", fields: [user1Id], references: [id])
  user2    User?     @relation("ChatUser2", fields: [user2Id], references: [id])
  messages Message[]
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatroomId String   @db.ObjectId
  senderId   String   @db.ObjectId
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User     @relation(fields: [senderId], references: [id])
  chatroom ChatRoom @relation(fields: [chatroomId], references: [id])
}

model Contact {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName    String
  email   String
  phoneNumber String
  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  USER
  SELLER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum NotificationType {
  ORDER
  PAYMENT
  BOOKING
}

enum VerificationStatus {
  PENDING
  REQUESTED
  ACCEPTED
  REJECTED
}

enum ProductStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PlanDuration {
  WEEKLY
  MONTHLY
  YEARLY
}
